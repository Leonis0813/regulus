<%= javascript_tag do %>
$('#rate').html('<svg width="100%" height="620px" id="graph"></svg>');

<% hour = 60 * 60 %>
var num_bar = 100
var bar_width = 6

var graph_width = 1400
var offset_left = 75
var offset_right = 75
var graph_size_x = graph_width - offset_left - offset_right

var graph_height = 620
var offset_upper = 50
var offset_lower = 50
var graph_size_y = graph_height - offset_upper - offset_lower

var dataSet = <%== @rates.to_json %>
var min = <%= @rates.map {|rate| rate[:low] }.sort.first %>
var max = <%= @rates.map {|rate| rate[:high] }.sort.last %>

var xScale = d3.time.scale()
  .domain([
    new Date('<%= (Time.parse(@rates.last[:time]) + 9 * hour).strftime('%Y-%m-%d %H:%M:%S') %>'),
    new Date('<%= (Time.parse(@rates.first[:time]) + 9 * hour).strftime('%Y-%m-%d %H:%M:%S') %>')
  ])
  .range([offset_left, graph_width - offset_right]);

var yScale = d3.scale.linear()
  .domain([min, max])
  .range([graph_height - offset_lower, offset_upper]);

var line = d3.svg.line()
  .x(function(d) {return graph_size_x - d[0] * (graph_size_x / (num_bar - 1)) + offset_left;})
  .y(function(d) {return offset_upper + (graph_size_y * (max-d[1]))/(max-min);});

d3.select("#graph")
  .selectAll("path")
  .data(dataSet)
  .enter()
  .append("path")
  .attr("stroke", "black")
  .attr("d", function(d, i){
    return line([[i, d.high], [i, d.low]]);
  })

d3.select("#graph")
  .append("g")
  .attr("class", "axis")
  .attr("transform", "translate(0, " + (graph_height - offset_lower) + ")")
  .call(
    d3.svg.axis()
      .scale(xScale)
      .orient("bottom")
      .innerTickSize(-graph_size_y)
      .outerTickSize(2)
      .tickPadding(10)
      .ticks(15)
      .tickFormat(d3.time.format('%H:%M'))
  )

d3.select("#graph")
  .append("g")
  .attr("class", "axis")
  .attr("transform", "translate(" + offset_left + ", 0)")
  .call(
    d3.svg.axis()
      .scale(yScale)
      .orient("left")
      .innerTickSize(-graph_size_x)
      .outerTickSize(0)
      .tickPadding(10)
  )

d3.select("#graph")
  .selectAll("rect")
  .data(dataSet)
  .enter()
  .append("rect")
  .attr("x", function(d, i){
    return graph_size_x - i * (graph_size_x / (num_bar - 1)) + offset_left - bar_width / 2;
  })
  .attr("y", function(d, i){
    if(d.close > d.open)
      return offset_upper + (graph_size_y * (max-d.close))/(max-min);
    else
      return offset_upper + (graph_size_y * (max-d.open))/(max-min);
  })
  .attr("width", bar_width + "px")
  .attr("height", function(d, i){
    if(d.close == d.open)
      return "1px";
    else
      return (graph_size_y * Math.abs(d.close - d.open))/(max-min) + "px";
  })
  .style("fill", function(d, i){
    if(d.close > d.open)
      return "red";
    else if(d.close < d.open)
      return "blue";
    else
      return "black";
  })
  .on("mouseover", function(d){
    d3.select("#graph")
      .append("rect")
      .attr("class", "info")
      .attr("x", d3.mouse(this)[0] + 10)
      .attr("y", d3.mouse(this)[1] - 125)
      .attr("width", "230px")
      .attr("height", "135px")
      .attr("stroke", "black")
      .attr("fill", "white")
    d3.select("#graph")
      .append("text")
      .attr("class", "info")
      .text("時刻: " + d.time)
      .attr("x", d3.mouse(this)[0] + 18)
      .attr("y", d3.mouse(this)[1] - 100)
      .attr("stroke", "black")
    d3.select("#graph")
      .append("text")
      .attr("class", "info")
      .text("始値: " + d.open)
      .attr("x", d3.mouse(this)[0] + 18)
      .attr("y", d3.mouse(this)[1] - 75)
      .attr("stroke", "black")
    d3.select("#graph")
      .append("text")
      .attr("class", "info")
      .text("終値: " + d.close)
      .attr("x", d3.mouse(this)[0] + 18)
      .attr("y", d3.mouse(this)[1] - 50)
      .attr("stroke", "black")
    d3.select("#graph")
      .append("text")
      .attr("class", "info")
      .text("高値: " + d.high)
      .attr("x", d3.mouse(this)[0] + 18)
      .attr("y", d3.mouse(this)[1] - 25)
      .attr("stroke", "black")
    d3.select("#graph")
      .append("text")
      .attr("class", "info")
      .text("安値: " + d.low)
      .attr("x", d3.mouse(this)[0] + 18)
      .attr("y", d3.mouse(this)[1] - 0)
      .attr("stroke", "black")
  })
  .on("mouseout", function(){
    d3.selectAll(".info")
      .remove()
  })

var moving_average = d3.svg.line()
  .x(function(d, i) {return graph_size_x - i * (graph_size_x / (num_bar - 1)) + offset_left;})
  .y(function(d, i) {return offset_upper + (graph_size_y * (max-d))/(max-min);});

d3.select("#graph")
  .append("path")
  .attr("stroke", "green")
  .attr("fill", "none")
  .attr("d", moving_average(<%= @averages.map{|rate| rate[:average] } %>))
<% end %>
